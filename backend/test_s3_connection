import boto3
from botocore.exceptions import ClientError
from dotenv import load_dotenv
import os

load_dotenv()

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
BUCKET_NAME = 'billing-analyzer-files-emerjence'  # Your bucket name
AWS_REGION = 'us-east-1'  # Your bucket region

def test_s3_connection():
    """Test all S3 operations your app will use"""
    
    print("üîç Testing S3 Connection...\n")
    
    try:
        # Create S3 client
        s3_client = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_REGION
        )
        
        # Test 1: List bucket (check if we can access it)
        print("1Ô∏è‚É£ Testing bucket access...")
        response = s3_client.list_objects_v2(Bucket=BUCKET_NAME)
        print(f"   ‚úÖ Successfully connected to bucket: {BUCKET_NAME}")
        print(f"   üìÅ Current files in bucket: {response.get('KeyCount', 0)}\n")
        
        # Test 2: Upload a test file
        print("2Ô∏è‚É£ Testing file upload...")
        test_content = b'Hello from Billing Analyzer! This is a test file.'
        s3_client.put_object(
            Bucket=BUCKET_NAME,
            Key='test-upload.txt',
            Body=test_content
        )
        print("   ‚úÖ Successfully uploaded test file: test-upload.txt\n")
        
        # Test 3: Download the file
        print("3Ô∏è‚É£ Testing file download...")
        obj = s3_client.get_object(Bucket=BUCKET_NAME, Key='test-upload.txt')
        downloaded_content = obj['Body'].read()
        assert downloaded_content == test_content
        print(f"   ‚úÖ Successfully downloaded file")
        print(f"   üìÑ Content: {downloaded_content.decode('utf-8')}\n")
        
        # Test 4: List files again
        print("4Ô∏è‚É£ Testing file listing...")
        response = s3_client.list_objects_v2(Bucket=BUCKET_NAME)
        if 'Contents' in response:
            print(f"   ‚úÖ Found {len(response['Contents'])} file(s):")
            for obj in response['Contents']:
                print(f"      - {obj['Key']} ({obj['Size']} bytes)")
        print()
        
        # Test 5: Delete the test file
        print("5Ô∏è‚É£ Testing file deletion...")
        s3_client.delete_object(Bucket=BUCKET_NAME, Key='test-upload.txt')
        print("   ‚úÖ Successfully deleted test file\n")
        
        # Final check
        print("6Ô∏è‚É£ Final verification...")
        response = s3_client.list_objects_v2(Bucket=BUCKET_NAME)
        print(f"   ‚úÖ Files remaining in bucket: {response.get('KeyCount', 0)}\n")
        
        print("=" * 50)
        print("üéâ ALL TESTS PASSED!")
        print("=" * 50)
        print("\n‚úÖ Your S3 configuration is working perfectly!")
        print("‚úÖ Your app will be able to:")
        print("   - Upload Excel files")
        print("   - Download files for processing")
        print("   - List all files")
        print("   - Delete files")
        print("\nüöÄ You're ready to deploy!")
        
        return True
        
    except ClientError as e:
        error_code = e.response['Error']['Code']
        error_message = e.response['Error']['Message']
        
        print("=" * 50)
        print("‚ùå TEST FAILED!")
        print("=" * 50)
        print(f"\n‚ùå Error Code: {error_code}")
        print(f"‚ùå Error Message: {error_message}\n")
        
        # Common error solutions
        if error_code == 'AccessDenied':
            print("üîß SOLUTION:")
            print("   1. Check if you attached the S3 policy to the IAM user")
            print("   2. Make sure the policy includes your bucket name")
            print("   3. Wait 1-2 minutes for permissions to propagate")
        elif error_code == 'NoSuchBucket':
            print("üîß SOLUTION:")
            print("   1. Verify your bucket name is correct")
            print("   2. Check the bucket region matches AWS_REGION")
        elif error_code == 'InvalidAccessKeyId':
            print("üîß SOLUTION:")
            print("   1. Double-check your Access Key ID")
            print("   2. Make sure there are no extra spaces")
        elif error_code == 'SignatureDoesNotMatch':
            print("üîß SOLUTION:")
            print("   1. Double-check your Secret Access Key")
            print("   2. Make sure you copied the full key")
        
        return False
    
    except Exception as e:
        print(f"‚ùå Unexpected error: {str(e)}")
        return False


if __name__ == "__main__":
    print("\n" + "=" * 50)
    print("  S3 CONNECTION TEST FOR BILLING ANALYZER")
    print("=" * 50 + "\n")
    
    test_s3_connection()